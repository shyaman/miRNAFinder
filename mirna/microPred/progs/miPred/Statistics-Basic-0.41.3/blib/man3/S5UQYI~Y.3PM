.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Basic 3"
.TH Basic 3 "2004-03-23" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
.Vb 1
\&    Statistics::Basic A collection of very basic statistics formulae for vectors.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # for use with one vector:
\&    Statistics::Basic::Mean;
\&    Statistics::Basic::Variance;
\&    Statistics::Basic::StdDev;
.Ve
.PP
.Vb 3
\&    # for use with two vectors:
\&    Statistics::Basic::CoVariance;
\&    Statistics::Basic::Correlation;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&    my $mean = Statistics::Basic::Mean->new($array_ref)->query;
.Ve
.PP
.Vb 1
\&    print "$mean\en";  # hooray
.Ve
.PP
.Vb 3
\&    # That works, but I needed to calculate a LOT of means for a lot of
\&    # arrays of the same size.  Furthermore, I needed them to operate FIFO
\&    # style.  So, they do:
.Ve
.PP
.Vb 1
\&    my $mo = new Statistics::Basic::Mean([1..3]);
.Ve
.PP
.Vb 3
\&    print $mo->query, "\en"; # the avearge of 1, 2, 3 is 2
\&          $mo->insert(4);   # Keeps the vector the same size automatically
\&    print $mo->query, "\en"; # so, the average of 2, 3, 4 is 3
.Ve
.PP
.Vb 2
\&    # You might need to keep a running average, so I included a growing
\&    # insert
.Ve
.PP
.Vb 2
\&          $mo->ginsert(5);  # Expands the vector size by one and appends a 5
\&    print $mo->query, "\en"; # so, the average is of 2, 3, 4, 5 is 7/2
.Ve
.PP
.Vb 1
\&    # And last, you might need the mean of [3, 7] after all the above
.Ve
.PP
.Vb 2
\&          $mo->set_vector([2,3]);  # *poof*, the vector is 2, 3!
\&    print $mo->query, "\en"; # and the average is now 5/2!  Tadda!
.Ve
.PP
.Vb 3
\&    # These functions all work pretty much the same for ::StdDev and
\&    # ::Variance but they work slightly differently for CoVariance and
\&    # Correlation.
.Ve
.PP
.Vb 1
\&    # Not suprisingly, the correlation of [1..3] and [1..3] is 1.0
.Ve
.PP
.Vb 1
\&    my $co = new Statistics::Basic::Correlation( [1..3], [1..3] );
.Ve
.PP
.Vb 1
\&    print $co->query, "\en";
.Ve
.PP
.Vb 1
\&    # Cut the correlation of [1..3, 7] and [1..3, 5] is less than 1
.Ve
.PP
.Vb 2
\&          $co->ginsert( 7, 5 );
\&    print $co->query, "\en";
.Ve
.SH "BUGS"
.IX Header "BUGS"
.Vb 3
\&    Besides the lack of documentation?  Well, I'm sure there's a bunch.
\&    I've tried to come up with a comprehensive suite of tests, but it's
\&    difficult to think of everything.
.Ve
.PP
.Vb 1
\&    If you spot any bugs, please tell me.
.Ve
.SH "ENV VARIABLES"
.IX Header "ENV VARIABLES"
.Sh "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
.Vb 1
\&   Try setting $ENV{DEBUG}=1; or $ENV{DEBUG}=2; to see the internals.
.Ve
.PP
.Vb 2
\&   Also, from your bash prompt you can 'DEBUG=1 perl ./myprog.pl' to
\&   enable debugging dynamically.
.Ve
.Sh "\s-1UNBIAS\s0"
.IX Subsection "UNBIAS"
.Vb 3
\&   This module uses the sum(X - mean(X))/N definition of variance.
\&   If you wish to use the unbiased, sum(X-mean(X)/(N-1) definition, then 
\&   set the $ENV{UNBIAS}=1;
.Ve
.PP
.Vb 2
\&   # And if you thought that was useful, then give a shout out to:
\&   # Robert McGehee <xxxxxxxx@wso.williams.edu>, for he requested it.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Please contact me with ANY suggestions, no matter how pedantic.
.Ve
.PP
.Vb 1
\&    Jettero Heller <japh@voltar-confed.org>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&    GPL!  I included a gpl.txt for your reading enjoyment.
.Ve
.PP
.Vb 4
\&    Though, additionally, I will say that I'll be tickled if you were to
\&    include this package in any commercial endeavor.  Also, any thoughts to
\&    the effect that using this module will somehow make your commercial
\&    package GPL should be washed away.
.Ve
.PP
.Vb 1
\&    I hereby release you from any such silly conditions.
.Ve
.PP
.Vb 4
\&    This package and any modifications you make to it must remain GPL.  Any
\&    programs you (or your company) write shall remain yours (and under
\&    whatever copyright you choose) even if you use this package's intended
\&    and/or exported interfaces in them.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\&    Most of the documentation is very thin.  Sorry.  The modules with their
\&    own documentation (no matter how thin) are listed below.
.Ve
.PP
.Vb 1
\&    Statistics::Basic::LeastSquareFit
.Ve
